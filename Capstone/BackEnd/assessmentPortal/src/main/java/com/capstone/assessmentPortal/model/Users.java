package com.capstone.assessmentPortal.model;

import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonIgnore;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * users entity class.
 */
@Setter
@Getter
@NoArgsConstructor
@Entity
public class Users {
    /**
     * user id autogenerated attribute.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long userId;
    /**
     * first name of user attribute.
     */
    @Column
    @NotBlank(message = "First Name is required")
    private String firstName;
    /**
     * last name of user attribute.
     */
    @Column
    @NotBlank(message = "Last Name is required")
    private String lastName;
    /**
     * date of birth(dd-mm-yyyy) attribute.
     */
    @Column
    @Pattern(regexp = "\\d{2}-\\d{2}-\\d{4}",
          message = "Date of birth pattern should be yyyy-mm-dd")
    @NotBlank(message = "Date of birth is required")
    private String dateOfBirth;
    /**
     * user gender attribute.
     */
    @Column
    @NotBlank(message = "Gender is required")
    private String gender;
    /**
     * user email attribute.
     */
    @Column(unique = true)
    @NotBlank(message = "Email is required")
    @Pattern(regexp = "^[A-Z0-9a-z+_-]+@nucleusteq[.]com$",
    message = "Email is not Valid")
    private String emailId;
    /**
     * user password attribute.
     */
    @Column
    @NotBlank(message = "Password is required")
    @Pattern(regexp = "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])"
            + "(?=.*[@#$%^&+=])(?=\\S+$).{8,}$",
            message = "Password must be at least 8 characters long and "
            + "contain at least one digit, one lowercase letter,"
            + " one uppercase letter, "
            + "one special character, and no whitespace")
    private String password;
    /**
     * role of user attribute.
     */
    @Column
    private String userType = "Student";
    /**
     * list of results of user attribute.
     */
    @OneToMany(mappedBy = "students", cascade = CascadeType.ALL)
    @JsonIgnore
    private List<Results> results = new ArrayList<>();
    /**
     * get results.
     * @return results
     */
    public final List<Results> getResults() {
        return new ArrayList<>(results);
    }
    /**
     * set results.
     * @param res res
     */
    public final void setResults(final List<Results> res) {
        this.results = new ArrayList<>(res);
    }
    /**
     * parameter constructor for users.
     * @param name name
     * @param userid userid
     */
    public Users(final String name, final Long userid) {
        this.userId = userid;
        this.firstName = name;
    }
    public Users(final Long userid, final String firstname, final String lastname, final String dateofBirth,
            final String genDer, final String emailid) {
        this.userId = userid;
        this.firstName = firstname;
        this.lastName = lastname;
        this.dateOfBirth = dateofBirth;
        this.gender = genDer; 
        this.emailId = emailid;
    }
}
