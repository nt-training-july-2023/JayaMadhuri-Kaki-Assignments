package com.capstone.assessmentportal.dto;

import java.util.Objects;

import com.capstone.assessmentportal.response.ValidationMessage;

import jakarta.persistence.Column;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
/**
 * Questions dto class.
 */
@Setter
@Getter
@NoArgsConstructor
@AllArgsConstructor
public class QuestionDto {
    /**
     * question id attribute autogenerated.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long questionId;
    /**
     * question title attribute.
     */
    @Column(nullable = false)
    @NotBlank(message = ValidationMessage.QUESTION_NOTBLANK)
    private String questionContent;
    /**
     * question option 1 attribute.
     */
    @Column(nullable = false)
    @NotBlank(message = ValidationMessage.OPTIONA_NOTBLANK)
    private String optionA;
    /**
     * question option 2 attribute.
     */
    @Column(nullable = false)
    @NotBlank(message = ValidationMessage.OPTIONB_NOTBLANK)
    private String optionB;
    /**
     * question option 3 attribute.
     */
    @Column(nullable = false)
    @NotBlank(message = ValidationMessage.OPTIONC_NOTBLANK)
    private String optionC;
    /**
     * question option 4 attribute.
     */
    @Column(nullable = false)
    @NotBlank(message = ValidationMessage.OPTIOND_NOTBLANK)
    private String optionD;
    /**
     * question answer attribute.
     */
    @Column(nullable = false)
    @Enumerated(EnumType.STRING)
    private Option correctAnswer;
    /**
     * subCategory id attribute.
     */
    @Column(nullable = false)
    @NotNull(message = ValidationMessage.QUIZID_NOTNULL)
    private Long subCategoryId;
    /**
     *hashcode method.
    */
    @Override
    public final int hashCode() {
        return Objects.hash(correctAnswer, optionA, optionB,
                optionC, optionD, questionContent, questionId,
                subCategoryId);
    }
    /**
     *equals method.
    */
    @Override
    public final boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        QuestionDto other = (QuestionDto) obj;
        return correctAnswer == other.correctAnswer
                && Objects.equals(optionA, other.optionA)
                && Objects.equals(optionB, other.optionB)
                && Objects.equals(optionC, other.optionC)
                && Objects.equals(optionD, other.optionD)
                && Objects.equals(questionContent, other.questionContent)
                && Objects.equals(questionId, other.questionId)
                && Objects.equals(subCategoryId, other.subCategoryId);
    }
}
